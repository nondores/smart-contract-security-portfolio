# Missing Null Check on Oracle Result

**Platform:** Cyfrin CodeHawks  
**Link:** [Submission #229](https://codehawks.cyfrin.io/c/2025-05-weather-witness/s/229)  
**Severity:** High  
**Status:** Acknowledged

🧠 Summary
The contract assumes the oracle will always return valid data. If the oracle fails or returns zero values, the logic may misbehave or proceed with invalid data.

🔍 Vulnerability Details
Oracle call results are used without validation:

(uint256 temp, uint256 humidity) = weatherOracle.getWeather();

No checks are in place to ensure these values are within a sane range or even non-zero.

💥 Impact
Can cause incorrect reward distribution.

May be exploited by feeding invalid (e.g., zero) data.

🛠️ Tools Used
Manual review

Oracle mocking in testing

🧩 Recommendation
Add input validation for oracle values:

require(temp > 0 && humidity > 0, "Invalid oracle response");

# Incentive Misalignment in Weather Reporting

**Platform:** Cyfrin CodeHawks  
**Link:** [Submission #224](https://codehawks.cyfrin.io/c/2025-05-weather-witness/s/224)  
**Severity:** Medium  
**Status:** Acknowledged

## 🧠 Summary
There is no slashing or penalty mechanism for inaccurate or deliberately wrong weather reporting. This opens the system to Sybil and manipulation risks.

## 🔍 Vulnerability Details
The current logic rewards based on participation but not on data accuracy.

## 💥 Impact
- Dishonest actors can game the system.
- Weather reports can become unreliable, affecting downstream logic or rewards.

## 🛠️ Tools Used
- Manual logic modeling
- Game theory analysis

## 🧩 Recommendation
Introduce a stake + slashing mechanism or majority consensus checks:

// Add stake
mapping(address => uint256) public reporterStakes;

// Slash if deviating too far from consensus
function slashDishonestReporters(...) public {
    ...
}

  
